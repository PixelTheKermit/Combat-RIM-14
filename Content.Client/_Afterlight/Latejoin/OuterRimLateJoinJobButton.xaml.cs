using Content.Client.GameTicking.Managers;
using Content.Shared.Roles;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;
using Robust.Client.Utility;
using Robust.Shared.Prototypes;
using Robust.Shared.Utility;

namespace Content.Client._Afterlight.Latejoin;

[GenerateTypedNameReferences]
public sealed partial class OuterRimLateJoinJobButton : Button
{
    private readonly IPrototypeManager _prototypeManager;
    private ClientGameTicker _gameTicker;
    private EntityUid _station;
    private string _jobId;

    public OuterRimLateJoinJobButton(EntityUid station, string jobId, ClientGameTicker gameTicker, IPrototypeManager prototypeManager)
    {
        RobustXamlLoader.Load(this);
        _prototypeManager = prototypeManager;
        _gameTicker = gameTicker;

        _station = station;
        _jobId = jobId;

        _gameTicker.LobbyJobsAvailableUpdated += UpdateButton;
        UpdateButton(_gameTicker.JobsAvailable);
    }

    protected override void Dispose(bool disposing)
    {
        base.Dispose(disposing);
        _gameTicker.LobbyJobsAvailableUpdated -= UpdateButton;
    }

    private void UpdateButton(IReadOnlyDictionary<EntityUid, Dictionary<string, uint?>> obj)
    {
        if (!obj[_station].ContainsKey(_jobId))
        {
            Visible = false;
            return;
        }

        var prototype = _prototypeManager.Index<JobPrototype>(_jobId);

        if (prototype.Icon != null)
        {
            var specifier = new SpriteSpecifier.Rsi(new ResourcePath("/Textures/Interface/Misc/job_icons.rsi"), prototype.Icon);
            JobIcon.Texture = specifier.Frame0();
        }

        JobText.Text = $"{prototype.LocalizedName} ({obj[_station][_jobId]?.ToString() ?? "Unlimited"})";

        Disabled = obj[_station][_jobId] == 0;
    }
}
