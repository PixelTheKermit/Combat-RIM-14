using Content.Client.Stylesheets;
using Content.Client.UserInterface.Systems.Ghost.Controls;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Configuration;
using Robust.Shared.Timing;
using Content.Shared.CCVar;
using Content.Shared._Afterlight;

namespace Content.Client.UserInterface.Systems.Ghost.Widgets;

[GenerateTypedNameReferences]
public sealed partial class GhostGui : UIWidget
{
    [Dependency] private readonly IConfigurationManager _cfg = default!;
    [Dependency] private readonly IGameTiming _timing = default!;
    private TimeSpan? _deathTime = null;
    private float _minTimeToRespawn;

    public GhostTargetWindow TargetWindow { get; }
    public event Action? ReturnToBodyPressed;
    public event Action? GhostRespawnPressed;

    public GhostGui()
    {
        RobustXamlLoader.Load(this);

        TargetWindow = new GhostTargetWindow();

        MouseFilter = MouseFilterMode.Ignore;

        ReturnToBodyButton.OnPressed += _ => ReturnToBodyPressed?.Invoke();
        GhostRespawnButton.OnPressed += _ => GhostRespawnPressed?.Invoke();
    }

    public void Hide()
    {
        TargetWindow.Close();
        Visible = false;
    }

    protected override void FrameUpdate(FrameEventArgs args)
    {
        if (_deathTime is null)
        {
            GhostRespawnButton.Text = "Respawn";
            GhostRespawnButton.Disabled = true;
            return;
        }

        var minSinceDeath = (_timing.CurTime - _deathTime.Value).TotalMinutes;
        var reqTime = _cfg.GetCVar(AfterlightCVarsShared.RespawnTime);

        if (minSinceDeath >= reqTime)
        {
            GhostRespawnButton.Text = "Respawn";
            GhostRespawnButton.Disabled = false;
        }
        else
        {
            GhostRespawnButton.Text = $"Respawn ({(reqTime - minSinceDeath) * 60:F1}s left)";
            GhostRespawnButton.Disabled = true;
        }
    }

    public void Update(bool? canReturnToBody, TimeSpan? deathTime)
    {
        _deathTime = deathTime;
        ReturnToBodyButton.Disabled = !canReturnToBody ?? true;
        TargetWindow.Populate();
    }

    protected override void Dispose(bool disposing)
    {
        base.Dispose(disposing);

        if (disposing)
        {
            TargetWindow.Dispose();
        }
    }
}
